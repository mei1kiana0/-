/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2024 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "i2c.h"
#include "usart.h"
#include "gpio.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "tools.h"
#include "pca9685.h"
#include "servo.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */
uint8_t data1[] = {0x01, 0xF3, 0xAB, 0x01, 0x00, 0x6B}; //使能
uint8_t data2[13] = {0x04,0xFD,0x00,0x00,0x3C,0x00,0x00,0x00,0x0c,0x80,0x00,0x00,0x6B};//位置控制  命令格式：地址 + 0xFD + 方向 + 速度+ 加速度 + 脉冲数（4字节） + 相对/绝对模式标志 + 多机同步标志 + 校验字节 0x7D =32000
uint8_t data3[] = {0x02,0xFD,0x01,0x00,0x3C,0x00,0x00,0x00,0x19,0x00,0x00,0x00,0x6B};//位置控制  命令格式：地址 + 0xFD + 方向 + 速度+ 加速度 + 脉冲数（4字节） + 相对/绝对模式标志 + 多机同步标志 + 校验字节
uint8_t data4[] = {0x03,0xFD,0x01,0x00,0x3C,0x00,0x00,0x00,0x19,0x00,0x00,0x00,0x6B};//位置控制  命令格式：地址 + 0xFD + 方向 + 速度+ 加速度 + 脉冲数（4字节） + 相对/绝对模式标志 + 多机同步标志 + 校验字节
uint8_t data5[] = {0x04,0xFD,0x00,0x00,0x3C,0x00,0x00,0x00,0x19,0x00,0x00,0x00,0x6B};//位置控制  命令格式：地址 + 0xFD + 方向 + 速度+ 加速度 + 脉冲数（4字节） + 相对/绝对模式标志 + 多机同步标志 + 校验字节
//位置控制 初始设置为速度60rpm,脉冲6400，即1r/s，总共转2r（3200脉冲为1r）

//速度控制 初始设置为速度60rpm
uint8_t data10[5] = {0x01,0xFE,0x98,0x00,0x6B}; //立即停止
uint8_t data11[5] = {0x02,0xFE,0x98,0x00,0x6B}; //立即停止
uint8_t data12[5] = {0x03,0xFE,0x98,0x00,0x6B}; //立即停止
uint8_t data13[5] = {0x04,0xFE,0x98,0x00,0x6B}; //立即停止
//速度控制 电机立即停止
uint8_t data14[] = {0x01,0xFE,0x98,0x00,0x6B};
uint8_t data15[] = {0x02,0xFE,0x98,0x00,0x6B};
uint8_t data16[] = {0x03,0xFE,0x98,0x00,0x6B};
uint8_t data17[] = {0x04,0xFE,0x98,0x00,0x6B};
const double pi =3.1416;
const double  rx =23;	//两个麦轮横向距离
const double  ry =17; //两个麦轮纵向距离
const double  r =5; //半径
const double standard_speed = 31.416; // 60rpm=1r/s  =0.31416m/s  =31.416cm/s
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void Motor_stop(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
//先设定沿x轴运动 data[2]至data[5]
//先设定沿y轴运动
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */
	
	
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART1_UART_Init();
  MX_I2C1_Init();
  MX_USART3_UART_Init();
  /* USER CODE BEGIN 2 */
//设置要运动的距离




//HAL_UART_Transmit_IT(&huart1,data2,sizeof(data2));
SetCarSpeed(0,31.416,0);
HAL_Delay(985); //微调设定980ms为1s
Motor_stop();
//HAL_Delay(1000);
//HAL_UART_Transmit_IT(&huart1,data16,sizeof(data16));
//Car_move(31.416,0,0,3200);Car_move(31.416,0,0,3200);
/*HAL_UART_Transmit_IT(&huart1,data3,sizeof(data3));
HAL_Delay(2);
HAL_UART_Transmit_IT(&huart1,data4,sizeof(data4));
HAL_Delay(2);
HAL_UART_Transmit_IT(&huart1,data5,sizeof(data5));
HAL_Delay(2);*/







  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_5);
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_5,GPIO_PIN_SET);
		HAL_Delay(500);
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 168;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
  {
    Error_Handler();
  }
}

/* USER CODE BEGIN 4 */
void Motor_stop(void)
{
	HAL_UART_Transmit_IT(&huart1,data10,sizeof(data10));
	HAL_Delay(2);
	HAL_UART_Transmit_IT(&huart1,data11,sizeof(data11));
	HAL_Delay(2);
	HAL_UART_Transmit_IT(&huart1,data12,sizeof(data12));
	HAL_Delay(2);
	HAL_UART_Transmit_IT(&huart1,data13,sizeof(data13));
	HAL_Delay(2);
}
/* USER CODE END 4 */

/**
  * @brief  Period elapsed callback in non blocking mode
  * @note   This function is called  when TIM7 interrupt took place, inside
  * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
